@using BalancedScorecard.Components.Pages
@using BalancedScorecard.Enums
@using BalancedScorecard.Services
@inherits LayoutComponentBase
@inject IServiceProvider _services
@inject DialogService _dialogService
@inject NavigationManager _navigationManager

<RadzenComponents @rendermode="InteractiveServer" />

<div id="layout_root">
    <RadzenLayout>
        <RadzenHeader>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="120">
                <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
                @if (_componentService.RoutedPage is not null)
                {
                    switch(_services.GetRequiredService<IComponentService>().GetRoutedPageEnum())
                    {
                        case (PageComponent.Finances):
                            <RadzenRow Gap="20">
                                <RadzenButton Icon="dashboard" Text="Load Data" ButtonStyle="ButtonStyle.Base" Click="@(() => _services.GetRequiredService<IComponentService>().LoadDataButtonClick())"/>
                                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Center" Gap="20" >
                                    <RadzenLabel Text="From: " Component="RadzenFromDatePicker" />
                                    <RadzenDatePicker TValue="DateTime?" DateFormat="dd.MM.yyyy" Value=@(_services.GetRequiredService<IDataStoreService>().FromDateFilter) Change="@(args => _services.GetRequiredService<IDataStoreService>().FromDateFilter = args)" Name="RadzenFromDatePicker" />
                                    <RadzenLabel Text="Until: " Component="RadzenUntilDatePicker" />
                                    <RadzenDatePicker TValue="DateTime?" DateFormat="dd.MM.yyyy" Value=@(_services.GetRequiredService<IDataStoreService>().UntilDateFilter) Change="@(args => _services.GetRequiredService<IDataStoreService>().UntilDateFilter = args)" Name="RadzenUntilDatePicker" />
                                </RadzenStack>
                            </RadzenRow>

                            break;
                    }
                }
            </RadzenStack>
        </RadzenHeader>
        <RadzenSidebar Responsive="false" Style="width: max-content">
            <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="false">
                <RadzenPanelMenuItem Text="Overview" Icon="dashboard" Path="" />
                <RadzenPanelMenuItem Text="Finances" Icon="credit_card" Path="finances" />
                <RadzenPanelMenuItem Text="Administration" Icon="admin_panel_settings" Path="administration" />
            </RadzenPanelMenu>
        </RadzenSidebar>
        <RadzenBody>
            <div class="rz-p-4">
                @Body
            </div>
        </RadzenBody>
    </RadzenLayout>
</div>

@code 
{
    private IComponentService _componentService => _services.GetRequiredService<IComponentService>();
    private bool sidebarExpanded = true;
}







