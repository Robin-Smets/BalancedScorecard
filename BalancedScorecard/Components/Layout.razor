@using BalancedScorecard.Enums
@using BalancedScorecard.Services
@inherits LayoutComponentBase
@inject IDataStoreService _dataStoreService
@inject IPlotDrawer _plotDrawer
@inject DialogService _dialogService
@inject NavigationManager _navigationManager

<RadzenComponents @rendermode="InteractiveServer" />

<div id="layout_root">
    <RadzenLayout>
        <RadzenHeader>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10">
                <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
                <RadzenButton Icon="dashboard" Text="Load Data" ButtonStyle="ButtonStyle.Base" Click="LoadDataButtonClick"/>
            </RadzenStack>
        </RadzenHeader>
        <RadzenSidebar Responsive="false" Style="width: max-content">
            <RadzenPanelMenu DisplayStyle="@(sidebarExpanded ? MenuItemDisplayStyle.IconAndText : MenuItemDisplayStyle.Icon)" ShowArrow="false">
                <RadzenPanelMenuItem Text="Overview" Icon="dashboard" Path="" />
                <RadzenPanelMenuItem Text="Finances" Icon="credit_card" Path="finances" />
                <RadzenPanelMenuItem Text="Administration" Icon="admin_panel_settings" Path="administration" />
            </RadzenPanelMenu>
        </RadzenSidebar>
        <RadzenBody>
            <div class="rz-p-4">
                @Body
            </div>
        </RadzenBody>
    </RadzenLayout>
</div>

@code {
    private bool sidebarExpanded = true;

    private async Task LoadDataButtonClick()
    {
        try
        {
            await _dataStoreService.LoadData();

            var startIndexRoute = _navigationManager.BaseUri.Count();
            var route = _navigationManager.Uri.Substring(startIndexRoute);
            if (route == "finances")
            {

                Task.Run(() => _plotDrawer.DrawOrderVolumeBarPlot(this));
                Task.Run(() => _plotDrawer.DrawOrderVolumePiePlots(this));
                Task.Run(() => _plotDrawer.DrawHeatmapForOrderVolumeMatrix(this));
            }
        }
        catch (Exception exception)
        {
            Console.WriteLine(exception.Message);
            throw;
        }
    }

}







