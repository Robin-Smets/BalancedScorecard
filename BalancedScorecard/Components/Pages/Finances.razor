@page "/finances"

@using System.Data
@using BalancedScorecard.Enums
@using BalancedScorecard.Events
@using BalancedScorecard.Services
@using System.Reflection
@using static BalancedScorecard.Extensions

@inject IJSRuntime _jSRuntime
@inject IServiceProvider _services

<RadzenTabs RenderMode="TabRenderMode.Client" @bind-SelectedIndex=@selectedIndex>
    <Tabs>
        <RadzenTabsItem Text="Order Volume">
            
            <RadzenRow JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-p-4 rz-w-100">
                <RadzenColumn>
                    <RadzenCard Variant="Variant.Outlined">
                        <div id="revenue-bar-plot" width="100%" height="100%"/>
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem" class="rz-p-sm-12">
                            <RadzenLabel Text="Time Unit:" Component="DropDownBindValue" />
                            <RadzenDropDown @bind-Value=@_appState.RevenueBarPlotSelectedTimeUnit Data=@timeUnits Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />
                        </RadzenStack>
                    </RadzenCard>
                </RadzenColumn>
            </RadzenRow>

            <RadzenRow class="rz-p-4 rz-w-100">
                <RadzenColumn>
                    <RadzenCard Variant="Variant.Outlined">
                        <RadzenRow JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-p-4 rz-w-100">
                            <RadzenColumn class="rz-p-4 rz-w-50">
                                <div id="revenue-customer-pie" />
                            </RadzenColumn>
                            <RadzenColumn class="rz-p-4 rz-w-50">
                                <div id="revenue-product-pie" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow JustifyContent="JustifyContent.Start" Gap="1rem" class="rz-p-4 rz-w-100">
                            <RadzenColumn class="rz-p-4 rz-w-50">
                                <div id="revenue-sales-person-pie" />
                            </RadzenColumn>
                            <RadzenColumn class="rz-p-4 rz-w-50">
                                <div id="revenue-territory-pie" />
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenCard>
                </RadzenColumn>
            </RadzenRow>

            <RadzenRow class="rz-p-4 rz-w-100 rz-pb-12">
                <RadzenCard Variant="Variant.Outlined" class="rz-w-100 rz-pb-12" Style="aspect-ratio: 1 / 1;">
                    <div id="revenue-heatmap" style="width: 100%; aspect-ratio: 1 / 1;" />
                </RadzenCard>
            </RadzenRow>

        </RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {
    public string SelectedTimeUnit { get; set; }

    private IPlotDrawer _plotDrawer => _services.GetRequiredService<IPlotDrawer>();
    private IEventMediator _eventMediator => _services.GetRequiredService<IEventMediator>();
    private IAppState _appState => _services.GetRequiredService<IAppState>();

    private int selectedIndex = 0;
    private IEnumerable<string> timeUnits;

    protected override async Task OnInitializedAsync()
    {
        _appState.RoutedPage = this;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            timeUnits = new List<string>()
            {
                "CW",
                "Month",
                "Quarter",
                "Year"
            };

            _eventMediator.Subscribe<VisualStateChangedEvent>(async (eventArgs) =>
            {
                await InvokeAsync(StateHasChanged);
            });

            _eventMediator.Subscribe<ButtonClickEvent>(async (eventArgs) =>
            {
                await OnLoadDataButtonClick(eventArgs);
            });

            _eventMediator.Subscribe<PlotClickedEvent>(async (eventArgs) =>
            {
                await OnPlotClick(eventArgs);
            });

            await _plotDrawer.DrawFinancesPlots(this);
            _eventMediator.Publish<VisualStateChangedEvent>(new VisualStateChangedEvent(this));
        }
    }

    public async Task OnLoadDataButtonClick(ButtonClickEvent args)
    {
        _appState.RevenueBarPlotWhereFilter = Tuple.Create("", "");
        await _plotDrawer.DrawFinancesPlots(this);
        _eventMediator.Publish<VisualStateChangedEvent>(new VisualStateChangedEvent(this));
    }

    [JSInvokable("OnPlotClick")]
    public static void OnPlotClick(string elementId, string label, decimal value)
    {
        Console.WriteLine($"Element: {elementId} Label: {label}, Value: {value}");
        App.EventMediator.Publish<PlotClickedEvent>(new PlotClickedEvent(elementId, label, value));
    }

    public async Task OnPlotClick(PlotClickedEvent args)
    {
        var whereFilterColumn = "";

        switch (args.ElementId)
        {
            case "revenue-bar-plot":
                whereFilterColumn = _appState.RevenueBarPlotSelectedTimeUnit;
                break;
            case "revenue-customer-pie":
                whereFilterColumn = "Customer";
                break;
            case "revenue-product-pie":
                whereFilterColumn = "Product";
                break;
            case "revenue-sales-person-pie":
                whereFilterColumn = "SalesPerson";
                break;
            case "revenue-territory-pie":
                whereFilterColumn = "Territory";
                break;

            default:
                Console.WriteLine($"ERROR: PlotClickedEvent not implemented for {args.ElementId}.");
                break;
        }

        _appState.RevenueBarPlotWhereFilter = Tuple.Create(whereFilterColumn, args.Label);
        await _plotDrawer.DrawFinancesPlots(this);
        _eventMediator.Publish<VisualStateChangedEvent>(new VisualStateChangedEvent(this));
    }

}
